/**
 * The first line in the build configuration applies the Android Gradle plugin
 * to this build and makes the android block available to specify
 * Android-specific build options.*/

plugins {
    id 'com.android.application'
    id 'com.google.gms.google-services'
}

//apply plugin: 'com.google.gms.google-services'

/**
 * The android block is where you configure all your Android-specific
 * build options.*/
android {
    /**
     * The app's namespace. Used primarily to access app resources.*/

    namespace 'net.rivergod.sec.seoulrnd.android.menu'

    /**
     * compileSdk specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.*/

    compileSdk 33

    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.*/
    defaultConfig {
        // Uniquely identifies the package for publishing.
        applicationId "net.rivergod.sec.seoulrnd.android.menu"

        // Defines the minimum API level required to run the app.
        minSdk 27

        // Specifies the API level used to test the app.
        targetSdk 33

        // Defines the version number of your app.
        versionCode 13

        // Defines a user-friendly version name for your app.
        versionName "0.9.12"
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file("../keystores/debug.keystore")
        }
        release {
            storeFile file(System.getProperty("sec-seoulrnd.keystore.file", "release.keystore"))
            storePassword System.getProperty("sec-seoulrnd.keystore.password", "******")
            keyAlias System.getProperty("sec-seoulrnd.key.alias", "era")
            keyPassword System.getProperty("sec-seoulrnd.key.password", "******")
        }
    }

    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies ProGuard settings and is not signed by default.*/
    buildTypes {
        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the default ProGuard rules file.*/
        release {
            minifyEnabled true // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

/**
 * The dependencies block in the module-level build configuration file
 * specifies dependencies required to build only the module itself.
 * To learn more, go to Add build dependencies.
 */
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'


//    testCompile 'junit:junit:4.12'
//    compile 'com.android.support:appcompat-v7:23.1.1'
//    compile 'com.android.support:design:23.1.1'
//    compile 'com.google.android.gms:play-services-analytics:8.3.0'
    implementation 'com.google.firebase:firebase-analytics:17.4.1'
//
//    compile 'de.greenrobot:eventbus:2.4.0'
//
//    compile 'com.navercorp.volleyextensions:volley-caches:2.0.+'
//    compile 'com.nostra13.universalimageloader:universal-image-loader:1.8.6'
//
//    compile 'net.sourceforge.htmlcleaner:htmlcleaner:2.15'
    implementation 'com.tonicartos:superslim:0.4.+'

    // define a BOM and its version
    implementation(platform("com.squareup.okhttp3:okhttp-bom:4.12.0"))

    // define any required OkHttp artifacts without version
    implementation("com.squareup.okhttp3:okhttp")
    implementation("com.squareup.okhttp3:logging-interceptor")

}
